function init() {    addPlayer("ivan",100)    addPlayer("david",100)    addPlayer("ace",100)    addPlayer("bob",100)}let test_button = document.createElement("button");test_button.innerHTML = "test"test_button.id = "test_button";test_button.addEventListener("click", () => {    console.log("position",game.position)    console.log("endPos",game.endPos)    console.log("isFirstAction",game.isFirstAction)})document.body.appendChild(test_button);function makeInnerCard(rank, suit){    let card = document.createElement("div")    let innerSuit = document.createElement("div")    let img = document.createElement("img")    let number = document.createElement("div")    card.classList.add("card")    innerSuit.classList.add("suit")    number.classList.add("number")    number.innerHTML = rank    if(suit.length > 0){        img.src = "../cards/"+suit+".svg"    }    card.appendChild(innerSuit)    innerSuit.appendChild(img)    card.appendChild(number)    return card}function changeInnerCard(card, rank, suit){    let innerSuit = card.getElementsByClassName("suit")[0]    innerSuit.firstChild.src = "../cards/"+suit+".svg"    card.getElementsByClassName("number")[0].innerHTML = rank}function refreshInnerPlayers(){    for(let i in game.players){        let innerPlayer = document.getElementsByClassName("player")[i]        if(game.players[i].cards[0] === undefined){            changeInnerCard(innerPlayer.getElementsByClassName("card")[0], null, "")        }else{            changeInnerCard(innerPlayer.getElementsByClassName("card")[0], game.players[i].cards[0].rank, game.players[i].cards[0].suit)        }        if(game.players[i].cards[1] === undefined){            changeInnerCard(innerPlayer.getElementsByClassName("card")[1], null, "")        }else{            changeInnerCard(innerPlayer.getElementsByClassName("card")[1], game.players[i].cards[1].rank, game.players[i].cards[1].suit)        }        innerPlayer.getElementsByClassName("player-chips")[0].innerHTML = "chips: " + game.players[i].chips        innerPlayer.getElementsByClassName("player-bet")[0].innerHTML = "bet: " +  game.players[i].curentBet        let name = game.players[i].name        if(game.players[i].smallBlindBool){            name += " SB"        }        if(game.players[i].bigBlindBool){            name += " BB"        }        innerPlayer.getElementsByClassName("player-name")[0].innerHTML = name        if(game.players[i].action){            innerPlayer.getElementsByClassName("player-button-check")[0].disabled = false            innerPlayer.getElementsByClassName("player-button-bet")[0].disabled = false            innerPlayer.getElementsByClassName("player-button-fold")[0].disabled = false            if(game.players[i].curentBet < game.currentBet){                innerPlayer.getElementsByClassName("player-button-check")[0].textContent = "Call"                innerPlayer.getElementsByClassName("player-button-bet")[0].textContent = "Raise"            }            if(game.players[i].curentBet === game.currentBet){                innerPlayer.getElementsByClassName("player-button-check")[0].textContent = "Check"                innerPlayer.getElementsByClassName("player-button-bet")[0].textContent = "Bet"            }        }else{            innerPlayer.getElementsByClassName("player-button-check")[0].disabled = true            innerPlayer.getElementsByClassName("player-button-bet")[0].disabled = true            innerPlayer.getElementsByClassName("player-button-fold")[0].disabled = true        }        if(game.players[i].folded){            innerPlayer.getElementsByClassName("player-button-check")[0].disabled = true            innerPlayer.getElementsByClassName("player-button-bet")[0].disabled = true            innerPlayer.getElementsByClassName("player-button-fold")[0].disabled = true        }    }}function refreshInnerPot(){    let pot = document.getElementById("pot")    pot.getElementsByClassName("pot-chips")[0].innerHTML = game.pot}function addPlayer(name, chips){    game.addPlayer(new Player(name, chips))    let n = game.players.length - 1    let player = document.createElement("div")    let innerName = document.createElement("div")    let innerChips = document.createElement("div")    let innerBet = document.createElement("div")    player.classList.add("player")    innerName.classList.add("player-name")    innerName.textContent = name    if(game.players.at(game.players.length-1).smallBlindBool){        innerName.textContent += " SB"    }    if(game.players.at(game.players.length-1).bigBlindBool){        innerName.textContent += " BB"    }    innerChips.classList.add("player-chips")    innerChips.textContent = "chips: " + chips    innerBet.classList.add("player-bet")    innerBet.textContent = "bet: " + game.players[game.players.length-1].curentBet    document.getElementById("floor").appendChild(player)    player.appendChild(innerName)    player.appendChild(innerChips)    player.appendChild(innerBet)    player.appendChild(makeInnerCard(null, ""))    player.appendChild(makeInnerCard(null, ""))    let buttonCheck = document.createElement("button")    buttonCheck.classList.add("player-button-check")    buttonCheck.disabled = true    buttonCheck.textContent = "Check"    buttonCheck.addEventListener("click", () => {        if(buttonCheck.textContent === "X"){            player.removeChild(player.getElementsByClassName("player-range-input")[0])            player.appendChild(buttonFold)            refreshInnerPlayers()            isRange = false            return        }        game.call()        if(n === game.posGetPrevEndPos()   && !game.isFirstAction){            if(game.community.length === 0){                game.dealCommunityFlop()            }else if(game.community.length === 3){                game.dealCommunityTurn()            }else if(game.community.length === 4){                game.dealCommunityRiver()            }            game.resetBets()        }else{            game.nextPosition()            game.isFirstAction = false        }        refreshInnerPlayers()        refreshInnerPot()    })    player.appendChild(buttonCheck)    let buttonBet = document.createElement("button")    buttonBet.classList.add("player-button-bet")    buttonBet.disabled = true    buttonBet.textContent = "Bet"    let isRange = false    buttonBet.addEventListener("click", () => {        buttonCheck.textContent = "X"        let isBet = false        if(game.players[n].curentBet === game.currentBet){            isBet = true        }        if(!isRange){            player.removeChild(player.getElementsByClassName("player-button-fold")[0])            isRange = true            let rangeInput = document.createElement("input")            rangeInput.classList.add("player-range-input")            rangeInput.type = "range"            if(!isBet){                rangeInput.min = (game.currentBet*2).toString()                rangeInput.value = (game.currentBet*2).toString()            }else{                rangeInput.min = game.minBet                rangeInput.value = game.minBet            }            rangeInput.max = game.players[n].chips.toString()            rangeInput.step = "1"            player.appendChild(rangeInput)            buttonBet.textContent = rangeInput.value            rangeInput.addEventListener("input", () => {                player.getElementsByClassName("player-button-bet")[0].textContent = rangeInput.value            })            return;        }        if(isRange){            let rangeInput = player.getElementsByClassName("player-range-input")[0]            let value = rangeInput.value            player.removeChild(player.getElementsByClassName("player-range-input")[0])            player.appendChild(buttonFold)            if(value > 0){                if(isBet){                    game.bet(parseInt(value))                    game.isFirstAction = false                }else{                    game.raise(parseInt(value))                    game.isFirstAction = false                }                game.nextPosition()                refreshInnerPlayers()                refreshInnerPot()            }            buttonBet.textContent = "Bet"            isRange = false        }    })    player.appendChild(buttonBet)    let buttonFold = document.createElement("button")    buttonFold.classList.add("player-button-fold")    buttonFold.disabled = true    buttonFold.textContent = "Fold"    buttonFold.addEventListener("click", () => {        game.players[n].folded = true        game.isFirstAction = false        game.nextPosition()        refreshInnerPlayers()    })    player.appendChild(buttonFold)}function displayCommunityFlop(){    const innerCommunity = document.getElementById("community")    for(let i in game.community){        innerCommunity.appendChild(makeInnerCard(game.community[i].getRank(), game.community[i].getSuit()))    }}function displayCommunityTurn(i){//i is 3 for Turn and 4 for river    const innerCommunity = document.getElementById("community")    innerCommunity.appendChild(makeInnerCard(game.community[i].getRank(),game.community[i].getSuit()))}function flush(){    let innerCommunity = document.getElementById("community")    innerCommunity.removeChild(innerCommunity.firstChild)}function random(from,to){    return Math.floor(Math.random() * to) + from;}class Card{    constructor(suit,rank) {        this.suit = suit        this.rank = rank    }    getRank(){        return this.rank    }    getSuit(){        return this.suit    }}class Deck{    constructor(){        this.deck = []        this.makeCards()    }    makeCards(){        this.deck = []        let suit = ["heart","diamond","club","spade"]        let j = 1        let i = 0        let k = 0        while(i < 52){            this.deck[i] = new Card(suit.at(k),j)            if(j%13 === 0){                j = 0                k++            }            j++            i++        }    }    printCards(){        for(let i in this.deck){            console.log(this.deck[i].suit,this.deck[i].rank)        }    }    shuffle(){        for (let i in this.deck){            let s  = random(0,this.deck.length)            let ph = this.deck[s]            this.deck[s] = this.deck[i];            this.deck[i] = ph        }    }    getTopCard(){        return this.deck[this.deck.length-1]    }    popTopCard(){        this.deck.splice(this.deck.length-1,1)    }}class Player{    constructor(name = "",chips = 0){        this.name = name        this.chips = chips        this.cards = []        this.folded = false        this.bigBlindBool = false        this.smallBlindBool = false        this.action = false        this.curentBet = 0    }    addCard(card){        this.cards.push(card)    }    resetCards(){        this.cards = []    }    makeBB(){        this.bigBlindBool = true        this.smallBlindBool = false    }    makeSB(){        this.smallBlindBool = true        this.bigBlindBool = false    }}class Poker{    constructor(){        this.deck = new Deck()        this.players = []        this.community = []        this.minBet = 2        this.pot = 0        this.currentBet = 0        this.position = 0        this.endPos = 0        this.isFirstAction = true    }    addPlayer(player){        if(this.players.length === 0){            player.smallBlindBool = true        }        if(this.players.length === 1){            player.bigBlindBool = true        }        this.players.push(player)    }    printPlayers(){        for(let i in this.players){            console.log(this.players[i])        }    }    nextPosition(){        this.players[this.position].action = false        if(this.position >= this.players.length-1){            this.position = 0        }else{            this.position++        }        while(this.players[this.position].folded){            this.position++            if(this.position >= this.players.length){                this.position = 0            }        }        this.players[this.position].action = true    }    prevPosition(){        this.players[this.position].action = false        if(this.position < 0){            this.position = this.players.length - 1        }else{            this.position--;        }        this.players[this.position].action = true    }    posGetPrevEndPos(){        let phPos = this.endPos        while(this.players[phPos].folded || phPos === this.endPos){            phPos--            if(phPos < 0){                phPos = this.players.length - 1            }        }        return phPos    }    moveBlinds(){        while(!this.players[this.position].smallBlindBool){            this.nextPosition()        }        this.players[this.position].smallBlindBool = false        this.nextPosition()        this.players[this.position].makeSB()        this.nextPosition()        this.players[this.position].makeBB()        refreshInnerPlayers()        refreshInnerPot()    }    dealCards(startPos){        let phPos = startPos        for(let i in this.players){            if(phPos >= this.players.length){                phPos = 0            }            this.players[phPos].addCard(this.deck.getTopCard())            this.deck.popTopCard()            refreshInnerPlayers()            phPos++        }        phPos = startPos        for(let i in this.players){            if(phPos >= this.players.length){                phPos = 0            }            this.players[phPos].addCard(this.deck.getTopCard())            this.deck.popTopCard()            refreshInnerPlayers()            phPos++        }    }    bet(bet){        if(this.players[this.position].chips < bet){            return false;        }        this.players[this.position].chips -= bet        this.pot += bet        this.currentBet += bet        this.players[this.position].curentBet += bet        this.endPos = this.position        return true    }    raise(bet){        if(bet < this.currentBet*2 || this.players[this.position].chips < bet){            return false;        }        bet -= this.players[this.position].curentBet        this.players[this.position].chips -= bet        this.pot += bet        this.currentBet = bet + this.players[this.position].curentBet        this.players[this.position].curentBet += bet        this.endPos = this.position        return true    }    call(){        this.players[this.position].chips -= this.currentBet - this.players[this.position].curentBet        this.pot += this.currentBet - this.players[this.position].curentBet        this.players[this.position].curentBet = this.currentBet    }    nextDeal(){        this.deck.makeCards()        this.deck.shuffle()        let startPos = 0        while(!this.players[startPos].smallBlindBool){            startPos++        }        this.position = startPos        this.dealCards(this.position)        this.bet(this.minBet)        this.currentBet -= this.minBet        this.nextPosition()        this.bet(2*this.minBet)        this.nextPosition()        this.endPos = this.position        refreshInnerPlayers()    }    findFirstAction(){        for(let i in this.players){            if(this.players[i].smallBlindBool){                this.position = parseInt(i)                this.endPos = parseInt(i)                this.players[i].action = true            }else{                this.players[i].action = false            }        }        while(this.players[this.position].folded){            this.nextPosition()        }    }    dealCommunityFlop(){        this.deck.popTopCard()        let i = 0        while(i < 3){            this.community.push(this.deck.getTopCard())            this.deck.popTopCard()            i++        }        this.findFirstAction()        displayCommunityFlop()    }    dealCommunityTurn(){        this.deck.popTopCard()        this.community.push(this.deck.getTopCard())        this.deck.popTopCard()        this.findFirstAction()        displayCommunityTurn(3)    }    dealCommunityRiver(){        this.deck.popTopCard()        this.community.push(this.deck.getTopCard())        this.deck.popTopCard()        this.findFirstAction()        displayCommunityTurn(4)    }    resetBets(){        for(let i in this.players){            this.players[i].curentBet = 0        }        this.currentBet = 0        this.isFirstAction = true    }    rankHands(){//TODO: do logic for ranking card at end of round    }}game = new Poker()